package com.openbusiness.configuration;
	dialect "java"

// OptaPlanner Dependencies
import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

// Object Dependencies
import com.openbusiness.opta.Vehicle;
import com.openbusiness.opta.Destination;
import com.openbusiness.opta.RoutingPlannerSolution;

// Morning
import com.openbusiness.opta.dbs.DBSPlannerSolution;
import com.openbusiness.opta.dbs.DBSBranch; // Subclass of Destination

// Afternoon
// import com.openbusiness.opta.dbs.afternoon.DBSAfternoonPlannerSolution;
// import com.openbusiness.opta.dbs.afternoon.DBSAfternoonBranch; // Subclass of Destination


global HardSoftScoreHolder scoreHolder;

// #############################################################################
// HARD CONSTRAINTS
// #############################################################################


// #############################################################################
// HARD CONSTRAINTS: WEIGHT & FUEL CAPACITATED STANDARD
// #############################################################################

// Only applies to motorbikes
rule "vehicleVolCapacity"
   when
     $vehicle : Vehicle($capacity : volumeCapacity)
     $demandTotal : Number(intValue > $capacity) from accumulate(
        Destination(
	   deliveryVehicle == $vehicle,
	   $demand : volume
	),
	sum($demand)
     )
   then
     double score = $capacity - $demandTotal.intValue();
     scoreHolder.addHardConstraintMatch(kcontext, (int)score );
end

// Ensure the fuel usage doesn't go over the capacity
rule "vehicleFuelCapacity"
   when
     $vehicle : Vehicle($capacity : fuelCapacity,
				  $efficiency : fuelEfficiency)
     $demandTotal : Number(intValue > $capacity) from accumulate(
	Destination(
	 deliveryVehicle == $vehicle,
	 previousStandstill != null,
	 $distToPrevOrder : distanceToPrevOrder
      ),
      sum($distToPrevOrder / $efficiency)
     )
   then
     double score = $capacity - $demandTotal.intValue();
     scoreHolder.addHardConstraintMatch(kcontext, (int)score);
end

// Ensure the weight doesn't go over capacity
rule "vehicleWeightCapacity"
   when
     $vehicle : Vehicle($capacity : weightCapacity)
     $demandTotal : Number(intValue > $capacity) from accumulate(
	Destination(
	 deliveryVehicle == $vehicle,
	 $demand : weight
      ),
      sum($demand)
     )
   then
     double score = $capacity - $demandTotal.intValue();
     scoreHolder.addHardConstraintMatch(kcontext, (int)score);
end

// #############################################################################
// HARD CONSTRAINTS: TIME WINDOWED 
// #############################################################################

// Only applies to motorbikes
//rule "motorBikeVolCapacity"
//   when
//     $vehicle : DBSVehicle(vehicleType == "MotorBike",
//     			   $capacity : volumeCapacity)
//     $demandTotal : Number(intValue > $capacity) from accumulate(
//        Destination(
//	   deliveryVehicle == $vehicle,
//	   $demand : volume
//	),
//	sum($demand)
//    )
//   then
//     double score = $capacity - $demandTotal.intValue();
//     scoreHolder.addHardConstraintMatch(kcontext, (int)score );
//end

// Ensure the parcel is collected on time
rule "collectedOnTime"
    when
        DBSBranch(milliDueTime < milliArrivalTime, 
	          $dueTime : milliDueTime, 
		  $arrivalTime : milliArrivalTime)
    then
        scoreHolder.addHardConstraintMatch(kcontext, 
					   $dueTime - $arrivalTime.intValue());
end


// #############################################################################
// AFTERNOON SLOT
// #############################################################################

// ArrivalTime After Due time at Depot is built-in by VehicleRoutingImporter
// No extra rules needed

// #############################################################################
// SOFT CONSTRAINTS
// #############################################################################

// Optimise for minimum fuel used. Should also minimise number of vehicles.
rule "minimizeFuelCost"
   when 
     $order : Destination(
		      previousStandstill != null,
		      $distToPrevOrder  : distanceToPrevOrder
	    )
   then
     Vehicle vehicle = $order.getDeliveryVehicle();
     double fuelEfficiency = vehicle.getFuelEfficiency();
     double score = -$distToPrevOrder / fuelEfficiency;
     scoreHolder.addSoftConstraintMatch(kcontext, (int)score);
end

// Whether to make this a hard or soft constraint depends on the client requirements.
// The current assumption is that we'd like to minimize it but the vehicle
// can always go to a gas station at the end of its route. 
rule "distanceFromLastOrderToDepot"
    when
	$order : Destination(previousStandstill != null)
	not Destination(previousStandstill == $order)
    then
	Vehicle vehicle = $order.getDeliveryVehicle();
	scoreHolder.addSoftConstraintMatch(kcontext, - (int)$order.getDistanceTo(vehicle));
end



